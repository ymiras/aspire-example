@page "/products"
@inject CatalogApiClient CatalogApiClient
@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>Here are some of our amazing outdoor products that you can purchase.</p>

@if (products is null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0)
{
    <p><em>There is a problem loading out products. Please try again later.</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Image</th>
            <th>Name</th>
            <th>Description</th>
            <th>Price</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in products)
        {
            <tr>
                <td>@item.ImageUrl</td>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Price</td>
            </tr>    
        }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await CatalogApiClient.GetProducts();
    }

}